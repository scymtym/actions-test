name: Ubuntu Xenial

on: [push]

jobs:
  ffmpeg_master:
    runs-on: ubuntu-16.04
    needs: [libx264_stable,libx265_stable,lame_current,xvid_current,libvpx_current,vidstab_master,fdk-aac_current,libass_current]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                libv4l-dev sloccount git g++ make pkg-config libtool  \
                autoconf-archive autoconf



      - name: git.repository
        run: |
          export WORKSPACE=$(pwd)
          git clone -b master https://github.com/FFmpeg/FFmpeg.git .


      - name: download-from-libass@current
        uses: actions/download-artifact@v1
        with:
          name: libass@current
          path: upstream
      - name: download-from-fdk-aac@current
        uses: actions/download-artifact@v1
        with:
          name: fdk-aac@current
          path: upstream
      - name: download-from-vidstab@master
        uses: actions/download-artifact@v1
        with:
          name: vidstab@master
          path: upstream
      - name: download-from-libvpx@current
        uses: actions/download-artifact@v1
        with:
          name: libvpx@current
          path: upstream
      - name: download-from-xvid@current
        uses: actions/download-artifact@v1
        with:
          name: xvid@current
          path: upstream
      - name: download-from-lame@current
        uses: actions/download-artifact@v1
        with:
          name: lame@current
          path: upstream
      - name: download-from-libx265@stable
        uses: actions/download-artifact@v1
        with:
          name: libx265@stable
          path: upstream
      - name: download-from-nasm@current
        uses: actions/download-artifact@v1
        with:
          name: nasm@current
          path: upstream
      - name: download-from-libx264@stable
        uses: actions/download-artifact@v1
        with:
          name: libx264@stable
          path: upstream
      - name: extract-upstream-artiacts
        run: |
          export WORKSPACE=$(pwd)
          cd upstream
          find . -name '*.tar.gz' -exec tar -xzf '{}' \;

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-I${WORKSPACE}/install//include -march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --enable-shared \
            --enable-gpl \
            --enable-nonfree \
            --enable-avresample \
            --enable-hwaccel=h264_vaapi \
            --enable-hwaccel=mpeg2_vaapi \
            --enable-hwaccel=mpeg4_vaapi \
            --enable-libfdk-aac \
            --enable-libfreetype \
            --enable-libmp3lame \
            --enable-libv4l2 \
            --enable-libvidstab \
            --enable-libx264 \
            --enable-libx265 \
            --enable-libxcb \
            --enable-libxvid \
            --disable-static \
            --disable-runtime-cpudetect \
             --cpu=core2 \
           --prefix="${WORKSPACE}/install/"



          # Build
          make -j2

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q check  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  check  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          DESTDIR="${WORKSPACE}/install" \
            make -j2  install

          (
            cd "${WORKSPACE}"
            tar -czf "ffmpeg-master.tar.gz" install
          )




      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v ffmpeg-master.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ffmpeg@master
          path: artifacts

  nasm_current:
    runs-on: ubuntu-16.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget g++ make pkg-config  \
                libtool autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.gz" --output-document="nasm-2.13.03.tar.gz"
          unp -U "nasm-2.13.03.tar.gz"
          rm "nasm-2.13.03.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --prefix="${WORKSPACE}/install/"



          # Build
          make -j2

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q check  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  check  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          DESTDIR="${WORKSPACE}/install" \
            make -j2  install

          (
            cd "${WORKSPACE}"
            tar -czf "nasm-current.tar.gz" install
          )




      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v nasm-current.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: nasm@current
          path: artifacts

  libx264_stable:
    runs-on: ubuntu-16.04
    needs: [nasm_current]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount git g++ make pkg-config libtool autoconf-archive  \
                autoconf



      - name: git.repository
        run: |
          export WORKSPACE=$(pwd)
          git clone -b stable https://code.videolan.org/videolan/x264.git .


      - name: download-from-nasm@current
        uses: actions/download-artifact@v1
        with:
          name: nasm@current
          path: upstream
      - name: extract-upstream-artiacts
        run: |
          export WORKSPACE=$(pwd)
          cd upstream
          find . -name '*.tar.gz' -exec tar -xzf '{}' \;

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --enable-shared \
            --prefix="${WORKSPACE}/install/"



          # Build
          make -j2

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q check  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  check  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          DESTDIR="${WORKSPACE}/install" \
            make -j2  install

          (
            cd "${WORKSPACE}"
            tar -czf "libx264-stable.tar.gz" install
          )




      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v libx264-stable.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: libx264@stable
          path: artifacts

  libx265_stable:
    runs-on: ubuntu-16.04
    needs: [nasm_current]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://bitbucket.org/multicoreware/x265/get/stable.tar.gz" --output-document="stable.tar.gz"
          unp -U "stable.tar.gz"
          rm "stable.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: download-from-nasm@current
        uses: actions/download-artifact@v1
        with:
          name: nasm@current
          path: upstream
      - name: extract-upstream-artiacts
        run: |
          export WORKSPACE=$(pwd)
          cd upstream
          find . -name '*.tar.gz' -exec tar -xzf '{}' \;

      - name: freestyle.shell
        run: |
          export WORKSPACE=$(pwd)
          # setup environment (do not remove this comment!)
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"



          cd build/linux
          cmake -DENABLE_SHARED:bool=on -DCMAKE_INSTALL_PREFIX=${WORKSPACE}/install/ ../../source
          make -j2
          make install


      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v build/*.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: libx265@stable
          path: artifacts

  lame_current:
    runs-on: ubuntu-16.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget g++ make pkg-config  \
                libtool autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "http://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz" --output-document="lame-3.100.tar.gz"
          unp -U "lame-3.100.tar.gz"
          rm "lame-3.100.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --enable-nasm \
            --enable-static=no \
            --prefix="${WORKSPACE}/install/"



          # Build
          make -j2

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q check  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  check  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          DESTDIR="${WORKSPACE}/install" \
            make -j2  install

          (
            cd "${WORKSPACE}"
            tar -czf "lame-current.tar.gz" install
          )




      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v lame-current.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: lame@current
          path: artifacts

  xvid_current:
    runs-on: ubuntu-16.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget g++ make pkg-config  \
                libtool autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "http://downloads.xvid.org/downloads/xvidcore-1.3.5.tar.gz" --output-document="xvidcore-1.3.5.tar.gz"
          unp -U "xvidcore-1.3.5.tar.gz"
          rm "xvidcore-1.3.5.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: pre-build-hook/unix
        run: |
          export WORKSPACE=$(pwd)
          rm -f "${WORKSPACE}/install//lib/libxvidcore".*

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          # Bootstrap
          cd build/generic

          # Configure
          ./configure \
            --prefix="${WORKSPACE}/install/"



          # Build
          make -j2

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q check  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  check  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          DESTDIR="${WORKSPACE}/install" \
            make -j2  install

          (
            cd "${WORKSPACE}"
            tar -czf "xvid-current.tar.gz" install
          )




      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v xvid-current.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: xvid@current
          path: artifacts

  libvpx_current:
    runs-on: ubuntu-16.04
    needs: [nasm_current]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget g++ make pkg-config  \
                libtool autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://chromium.googlesource.com/webm/libvpx/+archive/v1.7.0.tar.gz" --output-document="v1.7.0.tar.gz"
          unp -U "v1.7.0.tar.gz"
          rm "v1.7.0.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: download-from-nasm@current
        uses: actions/download-artifact@v1
        with:
          name: nasm@current
          path: upstream
      - name: extract-upstream-artiacts
        run: |
          export WORKSPACE=$(pwd)
          cd upstream
          find . -name '*.tar.gz' -exec tar -xzf '{}' \;

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --enable-vp8 \
            --enable-shared \
            --disable-static \
            --disable-examples \
            --prefix="${WORKSPACE}/install/"



          # Build
          make -j2

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q check  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  check  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          DESTDIR="${WORKSPACE}/install" \
            make -j2  install

          (
            cd "${WORKSPACE}"
            tar -czf "libvpx-current.tar.gz" install
          )




      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v libvpx-current.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: libvpx@current
          path: artifacts

  vidstab_master:
    runs-on: ubuntu-16.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget g++ make cmake



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://github.com/georgmartius/vid.stab/archive/master.zip" --output-document="master.zip"
          unp -U "master.zip"
          rm "master.zip"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: cmake.cmake/unix
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p "build" && cd "build"
          rm -f CMakeCache.txt

          # Preparation


          # Set environment variables
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/vidstab/lib -Wl,-rpath,/vidstab/lib ${LDFLAGS}"


          # Find upstream CMake projects


          # Configure
           cmake  \
            -D CMAKE_CXX_FLAGS="${CXXFLAGS}" \
            -D CMAKE_C_FLAGS="${CFLAGS}" \
            -D CMAKE_INSTALL_PREFIX="/vidstab" \
            -D CMAKE_BUILD_TYPE=RelWithDebInfo \
           ..

          # Build
          make -j2

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q test  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  test  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          DESTDIR="${WORKSPACE}/install" \
            make -j2  install

          (
            cd "${WORKSPACE}"
            tar -czf "vidstab-master.tar.gz" install
          )





      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v vidstab-master.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: vidstab@master
          path: artifacts

  fdk-aac_current:
    runs-on: ubuntu-16.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget g++ make pkg-config  \
                libtool autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "http://downloads.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-0.1.6.tar.gz" --output-document="fdk-aac-0.1.6.tar.gz"
          unp -U "fdk-aac-0.1.6.tar.gz"
          rm "fdk-aac-0.1.6.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --prefix="${WORKSPACE}/install/"



          # Build
          make -j2

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q check  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  check  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          DESTDIR="${WORKSPACE}/install" \
            make -j2  install

          (
            cd "${WORKSPACE}"
            tar -czf "fdk-aac-current.tar.gz" install
          )




      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v fdk-aac-current.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: fdk-aac@current
          path: artifacts

  libass_current:
    runs-on: ubuntu-16.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget g++ make pkg-config  \
                libtool autoconf-archive autoconf libfontconfig1-dev  \
                libfreetype6-dev libfribidi-dev



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://github.com/libass/libass/archive/0.14.0.tar.gz" --output-document="0.14.0.tar.gz"
          unp -U "0.14.0.tar.gz"
          rm "0.14.0.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          # Bootstrap
          ./autogen.sh

          # Configure
          ./configure \
            --prefix="${WORKSPACE}/install/"



          # Build
          make -j2

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q check  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  check  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          DESTDIR="${WORKSPACE}/install" \
            make -j2  install

          (
            cd "${WORKSPACE}"
            tar -czf "libass-current.tar.gz" install
          )




      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v libass-current.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: libass@current
          path: artifacts

  praat_current:
    runs-on: ubuntu-16.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget make libpulse-dev  \
                libasound2-dev libgtk2.0-dev g++



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://github.com/praat/praat/archive/v6.0.37.tar.gz" --output-document="v6.0.37.tar.gz"
          unp -U "v6.0.37.tar.gz"
          rm "v6.0.37.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          sed "/^CFLAGS/s|-O3 -g1 -pthread$|-pthread $CFLAGS|" makefiles/makefile.defs.linux.pulse > makefile.defs

          # Build
          make -j2

          # Test
          # No tests

          # Package
          install -D praat install/bin/praat
          tar -czf "praat-current.tar.gz" install





      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v praat-current.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: praat@current
          path: artifacts

  mediainfo_current:
    runs-on: ubuntu-16.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount gzip bzip2 tar unzip unp wget make g++



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://mediaarea.net/download/binary/mediainfo/18.03/MediaInfo_CLI_18.03_GNU_FromSource.tar.gz" --output-document="MediaInfo_CLI_18.03_GNU_FromSource.tar.gz"
          unp -U "MediaInfo_CLI_18.03_GNU_FromSource.tar.gz"
          rm "MediaInfo_CLI_18.03_GNU_FromSource.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          ./CLI_Compile.sh --prefix=${WORKSPACE}/install/
          cd MediaInfo/Project/GNU/CLI && make install



      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v mediainfo-current.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: mediainfo@current
          path: artifacts

  mpv-player_master:
    runs-on: ubuntu-16.04
    needs: [libass_current,ffmpeg_master]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount git python gcc



      - name: git.repository
        run: |
          export WORKSPACE=$(pwd)
          git clone -b master https://github.com/mpv-player/mpv.git .


      - name: download-from-fdk-aac@current
        uses: actions/download-artifact@v1
        with:
          name: fdk-aac@current
          path: upstream
      - name: download-from-vidstab@master
        uses: actions/download-artifact@v1
        with:
          name: vidstab@master
          path: upstream
      - name: download-from-libvpx@current
        uses: actions/download-artifact@v1
        with:
          name: libvpx@current
          path: upstream
      - name: download-from-xvid@current
        uses: actions/download-artifact@v1
        with:
          name: xvid@current
          path: upstream
      - name: download-from-lame@current
        uses: actions/download-artifact@v1
        with:
          name: lame@current
          path: upstream
      - name: download-from-libx265@stable
        uses: actions/download-artifact@v1
        with:
          name: libx265@stable
          path: upstream
      - name: download-from-nasm@current
        uses: actions/download-artifact@v1
        with:
          name: nasm@current
          path: upstream
      - name: download-from-libx264@stable
        uses: actions/download-artifact@v1
        with:
          name: libx264@stable
          path: upstream
      - name: download-from-ffmpeg@master
        uses: actions/download-artifact@v1
        with:
          name: ffmpeg@master
          path: upstream
      - name: download-from-libass@current
        uses: actions/download-artifact@v1
        with:
          name: libass@current
          path: upstream
      - name: extract-upstream-artiacts
        run: |
          export WORKSPACE=$(pwd)
          cd upstream
          find . -name '*.tar.gz' -exec tar -xzf '{}' \;

      - name: freestyle.shell
        run: |
          export WORKSPACE=$(pwd)
          # setup environment (do not remove this comment!)
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"



          ./bootstrap.py
          ./waf configure --enable-libmpv-shared --prefix=${WORKSPACE}/install/
          ./waf build
          ./waf install


      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v build/*.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: mpv-player@master
          path: artifacts

  fktool_trunk:
    runs-on: ubuntu-16.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                sloccount subversion make



      - name: subversion.repository
        run: |
          export WORKSPACE=$(pwd)
          svn co "https://code.cor-lab.de/svn/dataproc/scripts/fktool/trunk/" "."

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          export PKG_CONFIG_PATH="${WORKSPACE}/upstream/install/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="${WORKSPACE}/upstream/install:${CMAKE_PREFIX_PATH}"
          export PATH="${WORKSPACE}/upstream/install/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L${WORKSPACE}/install//lib -Wl,-rpath,${WORKSPACE}/install//lib ${LDFLAGS}"


          # Build
          # Nothing to build

          # Test
          write_testresult() {
            date=$(date -Iseconds)
            cat > make_test_result.xml <<EOF
          <?xml version='1.0' encoding='UTF-8'?>
          <testsuites tests='1' failures='0' disabled='0' errors='0' timestamp='${date}' time='1' name='make_test'>
            <testsuite name='make_test' tests='1' failures='0' disabled='0' errors='0' time='1'>
              <testcase name='make_test' status='run' time='0'></testcase>
            </testsuite>
          </testsuites>
          EOF
            if [ $1 -gt 0 ] ; then
              sed -i -e "s/failures='0'/failures='1'/g" \
                     -e "s:></testcase>:><failure message='Tests failed'/></testcase>:g" \
                     make_test_result.xml
            fi
          }

          make -q test  || result=$?
          if [ $result -ne 2 ] ; then  # Are the test targets actually available?
            make -j2  test  || write_testresult $?
          else
            rm -f make_test_result.xml  # Remove old test result
          fi


          # Package
          make -j2  prefix=${WORKSPACE}/install install

          tar -czf "fktool-trunk.tar.gz" install




      - name: gather-artifacts
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p artifacts
          mv -v fktool-trunk.tar.gz artifacts/

      - name: upload-artifacts
        uses: actions/upload-artifact@v1
        with:
          name: fktool@trunk
          path: artifacts

  