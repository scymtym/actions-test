name: Ubuntu Bionic

on: [push]

jobs:
  ffmpeg_master:
    runs-on: ubuntu-18.04
    needs: [libx264_stable,libx265_stable,lame_current,xvid_current,libvpx_current,vidstab_master,fdk-aac_current,libass_current]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                libv4l-dev git make pkg-config libtool autoconf-archive autoconf



      - name: git.repository
        run: |
          export WORKSPACE=$(pwd)
          git clone -b master https://github.com/FFmpeg/FFmpeg.git .


      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-I/tmp/ffmpeg/include -march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --enable-shared \
            --enable-gpl \
            --enable-nonfree \
            --enable-avresample \
            --enable-hwaccel=h264_vaapi \
            --enable-hwaccel=mpeg2_vaapi \
            --enable-hwaccel=mpeg4_vaapi \
            --enable-libfdk-aac \
            --enable-libfreetype \
            --enable-libmp3lame \
            --enable-libv4l2 \
            --enable-libvidstab \
            --enable-libx264 \
            --enable-libx265 \
            --enable-libxcb \
            --enable-libxvid \
            --disable-static \
            --disable-runtime-cpudetect \
             --cpu=core2 \
           --prefix="/tmp/ffmpeg"



          # Build
          make -j2

          # Install
          make -j2  install




  nasm_current:
    runs-on: ubuntu-18.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                gzip bzip2 tar unzip unp wget make pkg-config libtool  \
                autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.gz" --output-document="nasm-2.13.03.tar.gz"
          unp -U "nasm-2.13.03.tar.gz"
          rm "nasm-2.13.03.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --prefix="/tmp/ffmpeg"



          # Build
          make -j2

          # Install
          make -j2  install




  libx264_stable:
    runs-on: ubuntu-18.04
    needs: [nasm_current]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                git make pkg-config libtool autoconf-archive autoconf



      - name: git.repository
        run: |
          export WORKSPACE=$(pwd)
          git clone -b stable https://code.videolan.org/videolan/x264.git .


      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --enable-shared \
            --prefix="/tmp/ffmpeg"



          # Build
          make -j2

          # Install
          make -j2  install




  libx265_stable:
    runs-on: ubuntu-18.04
    needs: [nasm_current]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                gzip bzip2 tar unzip unp wget



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://bitbucket.org/multicoreware/x265/get/stable.tar.gz" --output-document="stable.tar.gz"
          unp -U "stable.tar.gz"
          rm "stable.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: freestyle.shell
        run: |
          export WORKSPACE=$(pwd)
          # setup environment (do not remove this comment!)
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"



          # no install command


          cd build/linux
          cmake -DENABLE_SHARED:bool=on -DCMAKE_INSTALL_PREFIX=/tmp/ffmpeg ../../source
          make -j2
          make install



  lame_current:
    runs-on: ubuntu-18.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                gzip bzip2 tar unzip unp wget make pkg-config libtool  \
                autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "http://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz" --output-document="lame-3.100.tar.gz"
          unp -U "lame-3.100.tar.gz"
          rm "lame-3.100.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --enable-nasm \
            --enable-static=no \
            --prefix="/tmp/ffmpeg"



          # Build
          make -j2

          # Install
          make -j2  install




  xvid_current:
    runs-on: ubuntu-18.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                gzip bzip2 tar unzip unp wget make pkg-config libtool  \
                autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "http://downloads.xvid.org/downloads/xvidcore-1.3.5.tar.gz" --output-document="xvidcore-1.3.5.tar.gz"
          unp -U "xvidcore-1.3.5.tar.gz"
          rm "xvidcore-1.3.5.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: pre-build-hook/unix
        run: |
          export WORKSPACE=$(pwd)
          rm -f "/tmp/ffmpeg/lib/libxvidcore".*

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Bootstrap
          cd build/generic

          # Configure
          ./configure \
            --prefix="/tmp/ffmpeg"



          # Build
          make -j2

          # Install
          make -j2  install




  libvpx_current:
    runs-on: ubuntu-18.04
    needs: [nasm_current]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                gzip bzip2 tar unzip unp wget make pkg-config libtool  \
                autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://chromium.googlesource.com/webm/libvpx/+archive/v1.7.0.tar.gz" --output-document="v1.7.0.tar.gz"
          unp -U "v1.7.0.tar.gz"
          rm "v1.7.0.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --enable-vp8 \
            --enable-shared \
            --disable-static \
            --disable-examples \
            --prefix="/tmp/ffmpeg"



          # Build
          make -j2

          # Install
          make -j2  install




  vidstab_master:
    runs-on: ubuntu-18.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                gzip bzip2 tar unzip unp wget g++ make cmake



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://github.com/georgmartius/vid.stab/archive/master.zip" --output-document="master.zip"
          unp -U "master.zip"
          rm "master.zip"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: cmake.cmake/unix
        run: |
          export WORKSPACE=$(pwd)
          mkdir -p "build" && cd "build"
          rm -f CMakeCache.txt

          # Preparation


          # Set environment variables
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Find upstream CMake projects


          # Configure
           cmake  \
            -D CMAKE_CXX_FLAGS="${CXXFLAGS}" \
            -D CMAKE_C_FLAGS="${CFLAGS}" \
            -D CMAKE_SKIP_BUILD_RPATH=FALSE \
            -D CMAKE_BUILD_WITH_INSTALL_RPATH=FALSE \
            -D CMAKE_INSTALL_RPATH="/tmp/ffmpeg/lib" \
            -D CMAKE_INSTALL_LIBDIR=lib \
            -D CMAKE_INSTALL_PREFIX="/tmp/ffmpeg" \
            -D CMAKE_INSTALL_PREFIX="/tmp/ffmpeg" \
            -D CMAKE_BUILD_TYPE=RelWithDebInfo \
           ..

          # Build
          make -j2

          # Install
          make -j2  install





  fdk-aac_current:
    runs-on: ubuntu-18.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                gzip bzip2 tar unzip unp wget make pkg-config libtool  \
                autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "http://downloads.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-0.1.6.tar.gz" --output-document="fdk-aac-0.1.6.tar.gz"
          unp -U "fdk-aac-0.1.6.tar.gz"
          rm "fdk-aac-0.1.6.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Bootstrap
          # Nothing to do

          # Configure
          ./configure \
            --prefix="/tmp/ffmpeg"



          # Build
          make -j2

          # Install
          make -j2  install




  libass_current:
    runs-on: ubuntu-18.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                libfribidi-dev libfreetype6-dev libfontconfig1-dev gzip bzip2 tar  \
                unzip unp wget make pkg-config libtool autoconf-archive autoconf



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://github.com/libass/libass/archive/0.14.0.tar.gz" --output-document="0.14.0.tar.gz"
          unp -U "0.14.0.tar.gz"
          rm "0.14.0.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          # Environment Setup
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Bootstrap
          ./autogen.sh

          # Configure
          ./configure \
            --prefix="/tmp/ffmpeg"



          # Build
          make -j2

          # Install
          make -j2  install




  praat_current:
    runs-on: ubuntu-18.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                libgtk2.0-dev libasound2-dev libpulse-dev gzip bzip2 tar unzip  \
                unp wget make



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://github.com/praat/praat/archive/v6.0.37.tar.gz" --output-document="v6.0.37.tar.gz"
          unp -U "v6.0.37.tar.gz"
          rm "v6.0.37.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          sed "/^CFLAGS/s|-O3 -g1 -pthread$|-pthread $CFLAGS|" makefiles/makefile.defs.linux.pulse > makefile.defs

          # Build
          make -j2

          # Install
          install -D praat /tmp/ffmpeg/bin






  mediainfo_current:
    runs-on: ubuntu-18.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                make g++ gzip bzip2 tar unzip unp wget



      - name: archive.repository
        run: |
          export WORKSPACE=$(pwd)
          # Clean workspace.
          find . -mindepth 1 -maxdepth 1 -exec rm -rf {} \;

          # Unpack archive.
          wget --no-verbose "https://mediaarea.net/download/binary/mediainfo/18.03/MediaInfo_CLI_18.03_GNU_FromSource.tar.gz" --output-document="MediaInfo_CLI_18.03_GNU_FromSource.tar.gz"
          unp -U "MediaInfo_CLI_18.03_GNU_FromSource.tar.gz"
          rm "MediaInfo_CLI_18.03_GNU_FromSource.tar.gz"
          directory=$(find . -mindepth 1 -maxdepth 1)

          # Uniquely rename directory.
          temp=$(mktemp -d ./XXXXXXXX)
          mv -T "${directory}" "${temp}/"

          # Move contents to toplevel workspace directory.
          find "${temp}/" -mindepth 1 -maxdepth 1 -exec mv {} . \;
          rm -rf "${temp}"

      - name: freestyle.shell
        run: |
          export WORKSPACE=$(pwd)
          # setup environment (do not remove this comment!)
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"



          # no install command


          ./CLI_Compile.sh --prefix=/tmp/ffmpeg
          cd MediaInfo/Project/GNU/CLI && make install



  mpv-player_master:
    runs-on: ubuntu-18.04
    needs: [libass_current,ffmpeg_master]
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                python gcc git



      - name: git.repository
        run: |
          export WORKSPACE=$(pwd)
          git clone -b master https://github.com/mpv-player/mpv.git .


      - name: freestyle.shell
        run: |
          export WORKSPACE=$(pwd)
          # setup environment (do not remove this comment!)
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"



          # no install command


          ./bootstrap.py
          ./waf configure --enable-libmpv-shared --prefix=/tmp/ffmpeg
          ./waf build
          ./waf install



  fktool_trunk:
    runs-on: ubuntu-18.04
    steps:
      - name: install-platform-dependencies
        run: |
          export WORKSPACE=$(pwd)
          DEBIAN_FRONTEND=noninteractive sudo apt-get -qq update \
              && DEBIAN_FRONTEND=noninteractive sudo apt-get -qq --assume-yes install \
                subversion make



      - name: subversion.repository
        run: |
          export WORKSPACE=$(pwd)
          svn co "https://code.cor-lab.de/svn/dataproc/scripts/fktool/trunk/" "."

      - name: make.shell
        run: |
          export WORKSPACE=$(pwd)
          export PKG_CONFIG_PATH="/tmp/ffmpeg/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export CMAKE_PREFIX_PATH="/tmp/ffmpeg:${CMAKE_PREFIX_PATH}"
          export PATH="/tmp/ffmpeg/bin:${PATH}"
          export CFLAGS="-march=core2 -O2     ${CFLAGS}"
          export CXXFLAGS="-march=core2 -O2     ${CXXFLAGS}"
          export CPPFLAGS="-march=core2 -O2     ${CPPFLAGS}"
          export LDFLAGS="-L/tmp/ffmpeg/lib -Wl,-rpath,/tmp/ffmpeg/lib ${LDFLAGS}"


          # Build
          # Nothing to build

          # Install
          make -j2  prefix=/tmp/ffmpeg install





  